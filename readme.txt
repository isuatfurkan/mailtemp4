TempMail - Modern GeÃ§ici E-posta UygulamasÄ±Bu proje, React, TypeScript ve Tailwind CSS kullanÄ±larak oluÅŸturulmuÅŸ, zengin Ã¶zelliklere sahip, modern bir geÃ§ici e-posta uygulamasÄ±dÄ±r. KullanÄ±cÄ±larÄ±n gizliliÄŸini korumak amacÄ±yla tek kullanÄ±mlÄ±k e-posta adresleri oluÅŸturmalarÄ±na ve yÃ¶netmelerine olanak tanÄ±r.âœ¨ Ã–zelliklerÃ‡oklu Posta Kutusu: AynÄ± anda birden fazla geÃ§ici e-posta adresi oluÅŸturun ve yÃ¶netin.Ã–zelleÅŸtirilebilir Adresler: Kendi kullanÄ±cÄ± adÄ±nÄ±zÄ± seÃ§me ve Ã§eÅŸitli alan adlarÄ± arasÄ±ndan seÃ§im yapma imkanÄ±.Ayarlanabilir GeÃ§erlilik SÃ¼resi: E-posta adresleriniz iÃ§in 10 dakikadan 1 haftaya kadar geÃ§erlilik sÃ¼resi belirleyin.Ã‡oklu Dil DesteÄŸi: 15 farklÄ± dilde tam arayÃ¼z Ã§evirisi.AÃ§Ä±k ve Koyu Tema: GÃ¶z zevkinize uygun tema seÃ§imi.GerÃ§ek ZamanlÄ± Gelen Kutusu: Yeni e-postalarÄ± anÄ±nda gÃ¶rÃ¼ntÃ¼leyin.Bildirimler: Yeni bir e-posta geldiÄŸinde masaÃ¼stÃ¼ bildirimleri alÄ±n.Geri Bildirim Sistemi: Uygulama hakkÄ±ndaki dÃ¼ÅŸÃ¼ncelerinizi gÃ¶nderin ve gÃ¶nderilen tÃ¼m geri bildirimleri gÃ¶rÃ¼ntÃ¼leyin.ğŸš€ BaÅŸlarkenBu projeyi yerel makinenizde Ã§alÄ±ÅŸtÄ±rmak iÃ§in aÅŸaÄŸÄ±daki adÄ±mlarÄ± izleyin.GereksinimlerNode.js (v18 veya Ã¼stÃ¼)npm (Node.js ile birlikte gelir)KurulumProje dosyalarÄ±nÄ± bir klasÃ¶re kopyalayÄ±n ve terminalde o klasÃ¶re gidin.Gerekli paketleri yÃ¼kleyin:npm install
GeliÅŸtirme sunucusunu baÅŸlatÄ±n:npm run dev
Uygulama artÄ±k http://localhost:5173 adresinde Ã§alÄ±ÅŸÄ±yor olacak.ğŸš€ GitHub Pages ile CanlÄ±ya AlmaBu Vite projesini GitHub Pages Ã¼zerinden Ã¼cretsiz olarak yayÄ±nlamak iÃ§in aÅŸaÄŸÄ±daki adÄ±mlarÄ± izleyin.AdÄ±m 1: package.json DosyasÄ±nÄ± GÃ¼ncellemepackage.json dosyanÄ±zdaki homepage alanÄ±nÄ± gÃ¼ncelleyin. <KULLANICI_ADINIZ> ve <REPO_ADINIZ> kÄ±sÄ±mlarÄ±nÄ± kendi bilgilerinizle deÄŸiÅŸtirin.AdÄ±m 2: vite.config.ts DosyasÄ±nÄ± GÃ¼ncellemevite.config.ts dosyanÄ±zdaki base Ã¶zelliÄŸini, GitHub depo adÄ±nÄ±zla eÅŸleÅŸecek ÅŸekilde gÃ¼ncelleyin. <REPO_ADINIZ> kÄ±smÄ±nÄ± kendi depo adÄ±nÄ±zla deÄŸiÅŸtirin.AdÄ±m 3: GitHub Deposu OluÅŸturma ve Kodu YÃ¼klemeGitHub'da yeni bir depo (repository) oluÅŸturun.Proje dosyalarÄ±nÄ±zÄ± yerel makinenizden bu yeni depoya yÃ¼kleyin:git init
git add .
git commit -m "Ä°lk sÃ¼rÃ¼m"
git branch -M main
git remote add origin [https://github.com/](https://github.com/)<KULLANICI_ADINIZ>/<REPO_ADINIZ>.git
git push -u origin main
```<KULLANICI_ADINIZ>` ve `<REPO_ADINIZ>` kÄ±sÄ±mlarÄ±nÄ± kendi bilgilerinizle deÄŸiÅŸtirin.

AdÄ±m 4: gh-pages Paketini YÃ¼klemeProjenizi canlÄ±ya almak iÃ§in gh-pages paketini geliÅŸtirme baÄŸÄ±mlÄ±lÄ±ÄŸÄ± olarak yÃ¼kleyin (Bu iÅŸlem package.json dosyasÄ±nda sizin iÃ§in yapÄ±lmÄ±ÅŸtÄ±r, sadece npm install komutunu Ã§alÄ±ÅŸtÄ±rmanÄ±z yeterlidir).AdÄ±m 5: UygulamayÄ± CanlÄ±ya AlmaAÅŸaÄŸÄ±daki komutu Ã§alÄ±ÅŸtÄ±rarak uygulamanÄ±zÄ± derleyin ve gh-pages dalÄ±na gÃ¶nderin:npm run deploy
Bu komut, projenizi dist klasÃ¶rÃ¼ne derleyecek ve ardÄ±ndan bu klasÃ¶rÃ¼n iÃ§eriÄŸini deponuzdaki gh-pages dalÄ±na gÃ¶nderecektir.AdÄ±m 6: GitHub Pages AyarlarÄ±GitHub'daki deponuza gidin.Settings > Pages sekmesine tÄ±klayÄ±n."Branch" bÃ¶lÃ¼mÃ¼nde, kaynak olarak gh-pages dalÄ±nÄ± seÃ§in ve Save dÃ¼ÄŸmesine tÄ±klayÄ±n.BirkaÃ§ dakika sonra, siteniz https://<KULLANICI_ADINIZ>.github.io/<REPO_ADINIZ> adresinde canlÄ±ya alÄ±nacaktÄ±r!